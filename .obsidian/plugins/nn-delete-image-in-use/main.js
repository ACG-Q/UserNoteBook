/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NathanDeleteImage
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  deleteOption: ".trash"
};
var NathanDeleteImageSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Delete Image In Use Settings" });
    new import_obsidian.Setting(containerEl).setName("Deleted Image Destination").setDesc("Select where you want images to be moved once they are deleted").addDropdown((dropdown) => {
      dropdown.addOption("permanent", "Delete Permanently");
      dropdown.addOption(".trash", "Move to Obsidian Trash");
      dropdown.addOption("system-trash", "Move to System Trash");
      dropdown.setValue(this.plugin.settings.deleteOption);
      dropdown.onChange((option) => {
        this.plugin.settings.deleteOption = option;
        this.plugin.saveSettings();
      });
    });
  }
};

// src/main.ts
var imageExtensions = /* @__PURE__ */ new Set([
  "jpeg",
  "jpg",
  "png",
  "gif",
  "svg",
  "bmp"
]);
var SUCCESS_NOTICE_TIMEOUT = 1800;
var NathanDeleteImage = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.getAllImageFilesList = () => {
      const allFiles = app.vault.getFiles();
      const attachments = [];
      for (let i = 0; i < allFiles.length; i++) {
        if (allFiles[i].extension !== "md") {
          if (imageExtensions.has(allFiles[i].extension.toLowerCase())) {
            attachments.push(allFiles[i]);
          }
        }
      }
      return attachments;
    };
    this.getFileViaFullURLOfImage = (imageURL) => {
      let imageFileFullPath;
      const fileList = [];
      const allImageFiles = this.getAllImageFilesList();
      allImageFiles.forEach((imageFile) => {
        imageFileFullPath = app.vault.getResourcePath(imageFile);
        if (imageURL === imageFileFullPath) {
          fileList.push(imageFile);
        }
      });
      return fileList;
    };
  }
  async onload() {
    console.log("Delete Image In Use plugin loaded...");
    this.addSettingTab(new NathanDeleteImageSettingsTab(this.app, this));
    await this.loadSettings();
    this.registerDocument(document);
    app.workspace.on("window-open", (workspaceWindow, window2) => {
      this.registerDocument(window2.document);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
    console.log("Delete Image In Use plugin unloaded...");
  }
  onElement(el, event, selector, listener, options) {
    el.on(event, selector, listener, options);
    return () => el.off(event, selector, listener, options);
  }
  registerDocument(document2) {
    this.register(this.onElement(document2, "contextmenu", "img", this.onClick.bind(this)));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  registerEscapeButton(menu, document2 = activeDocument) {
    menu.register(this.onElement(document2, "keydown", "*", (e) => {
      if (e.key === "Escape") {
        e.preventDefault();
        e.stopPropagation();
        menu.hide();
      }
    }));
  }
  onClick(event) {
    event.preventDefault();
    const target = event.target;
    const imgType = target.localName;
    const menu = new import_obsidian2.Menu();
    const deleteOption = this.settings.deleteOption;
    let fileList;
    switch (imgType) {
      case "img": {
        const image = target.currentSrc;
        const imageDom = target;
        const thisURL = new URL(image);
        fileList = this.getFileViaFullURLOfImage(image);
        const Proto = thisURL.protocol;
        switch (Proto) {
          case "app:":
          case "data:":
          case "http:":
          case "https:":
            menu.addItem((item) => item.setIcon("trash").setTitle("Delete Image In Use url and file").onClick(async () => {
              var _a;
              try {
                for (const file of fileList) {
                  const parent_div = (_a = imageDom.parentElement) == null ? void 0 : _a.parentElement;
                  const parentOfimge = imageDom.parentElement;
                  parent_div.removeChild(parentOfimge);
                  console.log("\u{1F6A9}--------parent_dic attributename--------:" + parent_div.getAttributeNames);
                  if (deleteOption === ".trash") {
                    await app.vault.trash(file, false);
                    console.log("--\u56FE\u7247--" + thisURL + "\u88AB\u5220\u9664\u4E86");
                    new import_obsidian2.Notice("Image moved to Obsidian Trash !", SUCCESS_NOTICE_TIMEOUT);
                  } else if (deleteOption === "system-trash") {
                    await app.vault.trash(file, true);
                    console.log("--\u56FE\u7247--" + thisURL + "\u88AB\u5220\u9664\u4E86");
                    new import_obsidian2.Notice("Image moved to System Trash !", SUCCESS_NOTICE_TIMEOUT);
                  } else if (deleteOption === "permanent") {
                    await app.vault.delete(file);
                    console.log("--\u56FE\u7247--" + thisURL + "\u88AB\u5220\u9664\u4E86");
                    new import_obsidian2.Notice("Image deleted Permanently !", SUCCESS_NOTICE_TIMEOUT);
                  }
                }
              } catch (e) {
                new import_obsidian2.Notice("Error, could not deleye the image!");
              }
            }));
            break;
          default:
            new import_obsidian2.Notice(`no handler for ${Proto} protocol`);
            return;
        }
        break;
      }
      default:
        new import_obsidian2.Notice("No handler for this image type!");
        return;
    }
    this.registerEscapeButton(menu);
    menu.showAtPosition({ x: event.pageX, y: event.pageY });
    this.app.workspace.trigger("nn-delete-image-in-use:contextmenu", menu);
  }
};
//# sourceMappingURL=data:application/json;base64,
